rm -rf autom4te.cache build/
 rm configure config.* Makefile src/Makefile src/jupiter
 mv configure.scan configure.ac
#!/bin/sh
autoconf --install
automake --add-missing --copy >/dev/null 2>&1



----update makefile.in---
$ sh autogen.sh
run sh autogen.sh created 2 files: config.h.in and install-sh
So we see config.h.in been created means autoreconf has executed autoheader.  2-- install-sh executed automake  to created install.sh
Anythings provided /generated by Autotoos should be copied to archive directory so can be shipped to end user
./configure 
-------./config.status  --help----
  --generate config.h--- by $./config.status config.h 
-----
create test ex file L configure.ac
-----
#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.69])
AC_INIT([test], [1.0], [jupiterbugreport@example.org])
AC_CONFIG_COMMANDS([abc],
	           [echo "Testing $mypkgname"],
		   [mypkgname=$PACKAGE_nAME])
AC_OUTPUT
==============================================
run
 autoreonf... ./configure .... ./config.stats ...../config.status abc
./config.status --help
---------------------------screen shot
lshi@lshi-Ubuntu16:~/projects/jupiter_vpath/jupiter$ ./configure 
configure: creating ./config.status
config.status: executing abc commands
Testing test
lshi@lshi-Ubuntu16:~/projects/jupiter_vpath/jupiter$ ./config.status 
config.status: executing abc commands
Testing test
-------------------------------------------
Summay about  instanitiating macro
1) config.status script generates all files from templetes
2) configure script performs all checks and executes config.status
3) When run config.status wiht no cmd option, it generate file based on last set of check
results

4) you can call config.status to execut file generation or commands sets specified by any
of tags given in any of instantiating macro calles
5) config.status may generate file not associated wiht any tags specifed in configure.ac.
in which it 'll substitude var based on last set of checks performed.

-------------------------------------------



-----------------------------------

#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.69])
AC_INIT([test], [1.0])
AC_CONFIG_COMMANDS([ls],
	           [echo "Testing $mypkgname"],
		   [mypkgname=$PACKAGE_NAME])
AC_OUTPUT
			
 ---create templete header file called config.h
=== Using autheader to Generate an include file Templete=====
 rm config.h.in    autoheader   autoconfi  ./configure cat config.h
 it generate a entire set of preprocessor definitions was derived from configure.ac by autoheader
Add Checklib in configure.ac will triger the target lib been added in LIBS var
gcc -I. -I. -I.. -DHAVE_CONFIG_H  -g -O2 -o jupiter main.c  -ldl -lpthread  
==============================
 AC_CHECK_HEADERS(header-file..., [action-if-found],[action-if-not-found],[include='default-includes']) 



if shell script generted by AC_CHECK_HEADS loates the pthread.h   -=====> HAVE_PTHREAD_H  will be defined as 1 in config.h
else it is added as comments in config.h


 SO no need to define value of HAVE_CONFIG_H in configure.ac
==== supporting optinal Features and packages
1 ) macro AC_ARG_WITH  2) AC_ARG_ENABLE

CH 5 Automake


bin_PROGRAMS = jupiter
jupiter_SOURCE = main.c

bin_PROGRAMS = jupiter
jupiter_SOURCE = main.c
enalbe automake in configure.ac
ADD unit test in Makefile.am
 ADD tmp folder in jupiter prj 
 ls -1sh tmp/ 

===========make test... unit test========
ADD PLV in makefile.am of sr/
----------------------------------------
TESTS = $(check_SCRIPTS)

greptest.sh:
	echo './jupiter | grep "Hello" ' > greptest.sh
	chmod +x greptest.sh
CLEANFILES = greptest.sh
------------
$ make check
============================================================================
Testsuite summary for Jupiter 1.0
============================================================================
# TOTAL: 0
# PASS:  0
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0
============================================================================
 --- atuot make rule ensure that all scripts lists in TESTS are build before generate arules to check_SCRIPTS var contains a full list in TESS j
ensure all scripts listed in TESTS are built before ehs tets are executed. check <*PLVs become important 
= Reducing Complexity with Convenience Libraries==
ADD common folder -- change print_it to lib .a
 Modify common/Makefile.am ...addnoinst_LIBRARIES=libjupcommon.a
 Product option var... jpiter_CPPFlags , jupiter_LDADD
 ADDing the common directory to the SUBDIRS var
Building the New Library
 Add common in SUBDIRS of top          level Makefile.am 
 Adding common/Makefile to the AC_CONFIG_FILES macro
 ADD RANLIB in configure.ac
gcc -DHAVE_CONFIG_H -I. -I..     -g -O2 -MT print.o -MD -MP -MF .deps/print.Tpo -c -o print.o print.c
[master 6f5f6d6] ADD lib  build works CH5


Cutting through the noise
 make > /dev/null
Adding shared lib to Jupiter

===================================Libtools========================
Add include and libjup directory makfiles  --- AC_CONFIG_FILES([include/Makefile libjup/Makefile...])

wget ftp.gnu.org/gnu/libtool/libtool-2.2.6a.tar.gz
Using the LTLIBRARIES primary
 Modify top level Makefile.am-- -Adding libjup:
Update subdirs var in Makefle.am
libjupcommon_a_CFLAGS
libjupcommon_a_CFLAGS = -fPIC
